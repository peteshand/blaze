package blaze.utils.layout{	import flash.display.DisplayObject;	import flash.geom.Rectangle;		/**	 * ...	 * @author Pete Shand	 */		/**	 * Dimension Calculator.	 * This class is used to calculate the aspect ratio to use to best fit a Display Object 	 * into a specified area while maintaining the correct aspect ratio.	 */	public class Dimensions	{		public static const LETTERBOX:int = 0;		public static const ZOOM:int = 1;		public static const ORIGINAL:int = 2;		public static const STRETCH:int = 3;				public static var displayRatio:Number;		public static var objectRatio:Number;				private static var _rectangle:Rectangle = new Rectangle();				/**		 * Calculate the dimensions and aspect ratio to use to fit the object Display.		 * 		 * @param	boundWidth The width of the display area.		 * @param	boundHeight The height of the display area.		 * @param	objectWidth The width of the display object.		 * @param	objectHeight The height of the display object.		 * @param	zoomType This defines which display type to use. Possibilities include Normal, Zoom, Original, or Stretch.		 * @return  newDimensions An array containing the width, height, X position, and Y position to use to best fit the object display. 		 */				public static function calculate(boundWidth:Number, boundHeight:Number, objectWidth:Number, objectHeight:Number, zoomType:int=0):Rectangle 		{			Dimensions.displayRatio = boundWidth / boundHeight;			Dimensions.objectRatio = objectWidth / objectHeight;						if (zoomType == Dimensions.LETTERBOX)			{				if (objectRatio < displayRatio) {					Dimensions.rectangle.width = r(boundHeight * objectRatio);						Dimensions.rectangle.height = r(boundHeight);					Dimensions.rectangle.x = r((boundWidth - Dimensions.rectangle.width) / 2);					Dimensions.rectangle.y = 0;				}				else {					Dimensions.rectangle.width = r(boundWidth);						Dimensions.rectangle.height = r(boundWidth / objectRatio);					Dimensions.rectangle.x = 0;					Dimensions.rectangle.y = r((boundHeight - Dimensions.rectangle.height) / 2);				}			}			else if (zoomType == Dimensions.ZOOM)			{				if (objectRatio < displayRatio) {					Dimensions.rectangle.width = r(boundWidth);						Dimensions.rectangle.height = r(boundWidth / objectRatio);					Dimensions.rectangle.x = 0;					Dimensions.rectangle.y = r((boundHeight - Dimensions.rectangle.height) / 2);				}				else {					Dimensions.rectangle.width = r(boundHeight * objectRatio);						Dimensions.rectangle.height = r(boundHeight);					Dimensions.rectangle.x = r((boundWidth - Dimensions.rectangle.width) / 2);					Dimensions.rectangle.y = 0;				}			}			else if (zoomType == Dimensions.ORIGINAL) {				Dimensions.rectangle.width = r(objectWidth);				Dimensions.rectangle.height = r(objectHeight);				Dimensions.rectangle.x = r((boundWidth - Dimensions.rectangle.width) / 2);				Dimensions.rectangle.y = r((boundHeight - Dimensions.rectangle.height) / 2);			}			else if (zoomType == Dimensions.STRETCH) {				Dimensions.rectangle.width = r(boundWidth);					Dimensions.rectangle.height = r(boundHeight);				Dimensions.rectangle.x = r((boundWidth - Dimensions.rectangle.width) / 2);				Dimensions.rectangle.y = r((boundHeight - Dimensions.rectangle.height) / 2);			}						function r(i:Number):int			{				return Math.round(i);			}						return Dimensions.rectangle;		}				public static function get width():Number		{			return Dimensions.rectangle.width;		}				public static function get height():Number		{			return Dimensions.rectangle.height;		}				public static function get x():Number		{			return Dimensions.rectangle.x;		}				public static function get y():Number		{			return Dimensions.rectangle.y;		}				static public function get rectangle():Rectangle 		{			return _rectangle;		}				public static function setObject(object:DisplayObject):void		{			object.width = Dimensions.width;			object.height = Dimensions.height;			object.x = Dimensions.x;			object.y = Dimensions.y;		}	}}